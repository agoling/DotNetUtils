<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UtilsCore</name>
    </assembly>
    <members>
        <member name="T:UtilsCore.Abstract.BaseBackgroundWorker">
            <summary>
            BackgroundWorker后台操作基类
            </summary>
        </member>
        <member name="F:UtilsCore.Abstract.BaseBackgroundWorker.BgWorker">
            <summary>
            后台操作对象
            </summary>
        </member>
        <member name="F:UtilsCore.Abstract.BaseBackgroundWorker.ThreadName">
            <summary>
            线程名称
            </summary>
        </member>
        <member name="M:UtilsCore.Abstract.BaseBackgroundWorker.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="threadName">线程名称</param>
        </member>
        <member name="M:UtilsCore.Abstract.BaseBackgroundWorker.RunWorkerAsync">
            <summary>
            开始执行后台操作
            </summary>
        </member>
        <member name="M:UtilsCore.Abstract.BaseBackgroundWorker.RunWorkerAsync``1(``0)">
            <summary>
            开始执行后台操作
            </summary>
            <typeparam name="T">参数模型</typeparam>
            <param name="workerContext">参数</param>
        </member>
        <member name="M:UtilsCore.Abstract.BaseBackgroundWorker.ReportProgress(System.Int32)">
            <summary>
            报告进度引发ProgressChanged事件
            </summary>
            <param name="percentProgress">进度</param>
        </member>
        <member name="M:UtilsCore.Abstract.BaseBackgroundWorker.IsBusy">
            <summary>
            指示是否正在运行异步操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilsCore.Abstract.BaseBackgroundWorker.CancelAsync">
            <summary>
            取消挂起的后台操作
            </summary>
        </member>
        <member name="M:UtilsCore.Abstract.BaseBackgroundWorker.CancellationPending">
            <summary>
            指示应用程序是否已请求取消后台操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilsCore.Abstract.BaseBackgroundWorker.BgWorker_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            开始执行后台操作事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UtilsCore.Abstract.BaseBackgroundWorker.BgWorker_ProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
            <summary>
            进度改变事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UtilsCore.Abstract.BaseBackgroundWorker.BgWorker_RunWorkerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            执行完成后台操作事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UtilsCore.Abstract.BaseBackgroundWorker.BgWorker_Disposed(System.Object,System.EventArgs)">
            <summary>
            销毁后台操作事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:UtilsCore.CnDateHelper">
            <summary>
            公历农历转换
            </summary>
        </member>
        <member name="M:UtilsCore.CnDateHelper.lYearDays(System.Int32)">
            <summary>
            传回农历y年的总天数
            </summary>
        </member>
        <member name="M:UtilsCore.CnDateHelper.leapDays(System.Int32)">
            <summary>
            传回农历y年闰月的天数
            </summary>
        </member>
        <member name="M:UtilsCore.CnDateHelper.leapMonth(System.Int32)">
            <summary>
            传回农历y年闰哪个月 1-12 , 没闰传回 0
            </summary>
        </member>
        <member name="M:UtilsCore.CnDateHelper.monthDays(System.Int32,System.Int32)">
            <summary>
            传回农历y年m月的总天数
            </summary>
        </member>
        <member name="M:UtilsCore.CnDateHelper.AnimalsYear(System.Int32)">
            <summary>
            传回农历y年的生肖
            </summary>
        </member>
        <member name="M:UtilsCore.CnDateHelper.cyclicalm(System.Int32)">
            <summary>
            传入月日的offset 传回干支,0=甲子
            </summary>
        </member>
        <member name="M:UtilsCore.CnDateHelper.cyclical(System.Int32)">
            <summary>
            传入offset 传回干支, 0=甲子
            </summary>
        </member>
        <member name="M:UtilsCore.CnDateHelper.Lunar(System.Int32,System.Int32)">
            <summary>
            传出农历.year0 .month1 .day2 .yearCyl3 .monCyl4 .dayCyl5 .isLeap6
            </summary>
        </member>
        <member name="M:UtilsCore.CnDateHelper.calElement(System.Int32,System.Int32,System.Int32)">
            <summary>
            传出y年m月d日对应的农历.year0 .month1 .day2 .yearCyl3 .monCyl4 .dayCyl5 .isLeap6
            </summary>
        </member>
        <member name="M:UtilsCore.CnDateHelper.GetDaysByMonth(System.Int32,System.Int32)">
            <summary>
            传回公历y年m月的总天数
            </summary>
        </member>
        <member name="M:UtilsCore.CnDateHelper.GetMondayDateByDate(System.DateTime)">
            <summary>
            根据日期值获得周一的日期
            </summary>
            <param name="dt">输入日期</param>
            <returns>周一的日期</returns>
        </member>
        <member name="M:UtilsCore.CnDateHelper.GetChinaDate(System.DateTime)">
            <summary>
            获取农历
            </summary>
        </member>
        <member name="T:UtilsCore.CnDate">
            <summary>
            农历属性
            </summary>
        </member>
        <member name="F:UtilsCore.CnDate.CnIntYear">
            <summary>
            农历年(整型)
            </summary>
        </member>
        <member name="F:UtilsCore.CnDate.CnIntMonth">
            <summary>
            农历月份(整型)
            </summary>
        </member>
        <member name="F:UtilsCore.CnDate.CnIntDay">
            <summary>
            农历天(整型)
            </summary>
        </member>
        <member name="F:UtilsCore.CnDate.CnStrYear">
            <summary>
            农历年(支干)
            </summary>
        </member>
        <member name="F:UtilsCore.CnDate.CnStrMonth">
            <summary>
            农历月份(字符)
            </summary>
        </member>
        <member name="F:UtilsCore.CnDate.CnStrDay">
            <summary>
            农历天(字符)
            </summary>
        </member>
        <member name="F:UtilsCore.CnDate.CnAnm">
            <summary>
            农历属象
            </summary>
        </member>
        <member name="F:UtilsCore.CnDate.CnSolarTerm">
            <summary>
            二十四节气
            </summary>
        </member>
        <member name="F:UtilsCore.CnDate.LunarFtv">
            <summary>
            阴历节日
            </summary>
        </member>
        <member name="F:UtilsCore.CnDate.SolarFtv">
            <summary>
            阳历节日
            </summary>
        </member>
        <member name="T:UtilsCore.ChineseCalendar">
            <summary>
            中国日历
            </summary>
        </member>
        <member name="T:UtilsCore.ChineseCalendar.SolarHolidayStruct">
            <summary>
            阳历
            </summary>
        </member>
        <member name="T:UtilsCore.ChineseCalendar.LunarHolidayStruct">
            <summary>
            农历
            </summary>
        </member>
        <member name="F:UtilsCore.ChineseCalendar.LunarDateArray">
             <summary>
             来源于网上的农历数据
             </summary>
             <remarks>
             数据结构如下，共使用17位数据
             第17位：表示闰月天数，0表示29天   1表示30天
             第16位-第5位（共12位）表示12个月，其中第16位表示第一月，如果该月为30天则为1，29天为0
             第4位-第1位（共4位）表示闰月是哪个月，如果当年没有闰月，则置0
            </remarks>
        </member>
        <member name="M:UtilsCore.ChineseCalendar.#ctor(System.DateTime)">
            <summary>
            用一个标准的公历日期来初使化
            </summary>
        </member>
        <member name="M:UtilsCore.ChineseCalendar.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            用农历的日期来初使化
            </summary>
            <param name="cy">农历年</param>
            <param name="cm">农历月</param>
            <param name="cd">农历日</param>
            <param name="leapMonthFlag">闰月标志</param>
        </member>
        <member name="M:UtilsCore.ChineseCalendar.GetChineseMonthDays(System.Int32,System.Int32)">
            <summary>
            //传回农历y年m月的总天数
            </summary>
        </member>
        <member name="M:UtilsCore.ChineseCalendar.GetChineseLeapMonth(System.Int32)">
            <summary>
            传回农历 y年闰哪个月 1-12 , 没闰传回 0
            </summary>
        </member>
        <member name="M:UtilsCore.ChineseCalendar.GetChineseLeapMonthDays(System.Int32)">
            <summary>
            传回农历y年闰月的天数
            </summary>
        </member>
        <member name="M:UtilsCore.ChineseCalendar.GetChineseYearDays(System.Int32)">
            <summary>
            取农历年一年的天数
            </summary>
        </member>
        <member name="M:UtilsCore.ChineseCalendar.GetChineseHour(System.DateTime)">
            <summary>
            获得当前时间的时辰
            </summary> 
        </member>
        <member name="M:UtilsCore.ChineseCalendar.CheckDateLimit(System.DateTime)">
            <summary>
            检查公历日期是否符合要求
            </summary>
        </member>
        <member name="M:UtilsCore.ChineseCalendar.CheckChineseDateLimit(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            检查农历日期是否合理
            </summary>
        </member>
        <member name="M:UtilsCore.ChineseCalendar.ConvertNumToChineseNum(System.Char)">
            <summary>
            将0-9转成汉字形式
            </summary>
        </member>
        <member name="M:UtilsCore.ChineseCalendar.BitTest32(System.Int32,System.Int32)">
            <summary>
            测试某位是否为真
            </summary>
        </member>
        <member name="M:UtilsCore.ChineseCalendar.ConvertDayOfWeek(System.DayOfWeek)">
            <summary>
            将星期几转成数字表示
            </summary>
        </member>
        <member name="M:UtilsCore.ChineseCalendar.CompareWeekDayHoliday(System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            比较当天是不是指定的第周几
            </summary>
        </member>
        <member name="P:UtilsCore.ChineseCalendar.NewCalendarHoliday">
            <summary>
            计算中国农历节日
            </summary>
        </member>
        <member name="P:UtilsCore.ChineseCalendar.WeekDayHoliday">
            <summary>
            按某月第几周第几日计算的节日
            </summary>
        </member>
        <member name="P:UtilsCore.ChineseCalendar.DateHoliday">
            <summary>
            按公历日计算的节日
            </summary>
        </member>
        <member name="P:UtilsCore.ChineseCalendar.Date">
            <summary>
            取对应的公历日期
            </summary>
        </member>
        <member name="P:UtilsCore.ChineseCalendar.WeekDay">
            <summary>
            取星期几
            </summary>
        </member>
        <member name="P:UtilsCore.ChineseCalendar.WeekDayStr">
            <summary>
            周几的字符
            </summary>
        </member>
        <member name="P:UtilsCore.ChineseCalendar.DateString">
            <summary>
            公历日期中文表示法 如一九九七年七月一日
            </summary>
        </member>
        <member name="P:UtilsCore.ChineseCalendar.IsLeapYear">
            <summary>
            当前是否公历闰年
            </summary>
        </member>
        <member name="P:UtilsCore.ChineseCalendar.ChineseConstellation">
            <summary>
            28星宿计算
            </summary>
        </member>
        <member name="P:UtilsCore.ChineseCalendar.ChineseHour">
            <summary>
            时辰
            </summary>
        </member>
        <member name="P:UtilsCore.ChineseCalendar.IsChineseLeapMonth">
            <summary>
            是否闰月
            </summary>
        </member>
        <member name="P:UtilsCore.ChineseCalendar.IsChineseLeapYear">
            <summary>
            当年是否有闰月
            </summary>
        </member>
        <member name="P:UtilsCore.ChineseCalendar.ChineseDay">
            <summary>
            农历日
            </summary>
        </member>
        <member name="P:UtilsCore.ChineseCalendar.ChineseDayString">
            <summary>
            农历日中文表示
            </summary>
        </member>
        <member name="P:UtilsCore.ChineseCalendar.ChineseMonth">
            <summary>
            农历的月份
            </summary>
        </member>
        <member name="P:UtilsCore.ChineseCalendar.ChineseMonthString">
            <summary>
            农历月份字符串
            </summary>
        </member>
        <member name="P:UtilsCore.ChineseCalendar.ChineseYear">
            <summary>
            取农历年份
            </summary>
        </member>
        <member name="P:UtilsCore.ChineseCalendar.ChineseYearString">
            <summary>
            取农历年字符串如，一九九七年
            </summary>
        </member>
        <member name="P:UtilsCore.ChineseCalendar.ChineseDateString">
            <summary>
            取农历日期表示法：农历一九九七年正月初五
            </summary>
        </member>
        <member name="P:UtilsCore.ChineseCalendar.ChineseTwentyFourDay">
            <summary>
            定气法计算二十四节气,二十四节气是按地球公转来计算的，并非是阴历计算的
            </summary>
            <remarks>
            节气的定法有两种。古代历法采用的称为"恒气"，即按时间把一年等分为24份，
            每一节气平均得15天有余，所以又称"平气"。现代农历采用的称为"定气"，即
            按地球在轨道上的位置为标准，一周360°，两节气之间相隔15°。由于冬至时地
            球位于近日点附近，运动速度较快，因而太阳在黄道上移动15°的时间不到15天。
            夏至前后的情况正好相反，太阳在黄道上移动较慢，一个节气达16天之多。采用
            定气时可以保证春、秋两分必然在昼夜平分的那两天。
            </remarks>
        </member>
        <member name="P:UtilsCore.ChineseCalendar.ChineseTwentyFourPrevDay">
            <summary>
            当前日期前一个最近节气
            </summary>
        </member>
        <member name="P:UtilsCore.ChineseCalendar.ChineseTwentyFourNextDay">
            <summary>
            当前日期后一个最近节气
            </summary>
        </member>
        <member name="P:UtilsCore.ChineseCalendar.Constellation">
            <summary>
            计算指定日期的星座序号 
            </summary>
        </member>
        <member name="P:UtilsCore.ChineseCalendar.Animal">
            <summary>
            计算属相的索引，注意虽然属相是以农历年来区别的，但是目前在实际使用中是按公历来计算的
            鼠年为1,其它类推
            </summary>
        </member>
        <member name="P:UtilsCore.ChineseCalendar.AnimalString">
            <summary>
            取属相字符串
            </summary>
        </member>
        <member name="P:UtilsCore.ChineseCalendar.GanZhiYearString">
            <summary>
            取农历年的干支表示法如 乙丑年
            </summary>
        </member>
        <member name="P:UtilsCore.ChineseCalendar.GanZhiMonthString">
            <summary>
            取干支的月表示字符串，注意农历的闰月不记干支
            </summary>
        </member>
        <member name="P:UtilsCore.ChineseCalendar.GanZhiDayString">
            <summary>
            取干支日表示法
            </summary>
        </member>
        <member name="P:UtilsCore.ChineseCalendar.GanZhiDateString">
            <summary>
            取当前日期的干支表示法如 甲子年乙丑月丙庚日
            </summary>
        </member>
        <member name="T:UtilsCore.CryptoHelper">
            <summary>
            加密解密
            </summary>
        </member>
        <member name="M:UtilsCore.CryptoHelper.ToMd5(System.String)">
            <summary>
            转换为MD5
            </summary>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:UtilsCore.CryptoHelper.ToAesEncrypt(System.String,System.String)">
            <summary>
             AES 加密
            </summary>
            <param name="str">明文（待加密）</param>
            <param name="secretKey">密文</param>
            <returns></returns>
        </member>
        <member name="M:UtilsCore.CryptoHelper.ToAesDecrypt(System.String,System.String)">
            <summary>
             AES 解密
            </summary>
            <param name="str">明文（待解密）</param>
            <param name="secretKey">密文</param>
            <returns></returns>
        </member>
        <member name="T:UtilsCore.DownLoadHelper">
            <summary>
            文件下载帮助类
            </summary>
        </member>
        <member name="M:UtilsCore.DownLoadHelper.ResponseFile(System.Web.HttpResponseBase,System.Byte[],System.String)">
            <summary>
            网页文件字节流下载
            </summary>
            <param name="response">Page.Request对象</param>
            <param name="bytes">字节流</param>
            <param name="fileName">文件名 如:pic.jpg file.mp4 file.csv</param>
            <returns>返回是否成功</returns>
        </member>
        <member name="M:UtilsCore.DownLoadHelper.ResponseFile(System.Web.HttpRequest,System.Web.HttpResponse,System.String,System.String,System.Int64)">
            <summary>
             输出硬盘文件，提供下载 支持大文件、续传、速度限制、资源占用小
            </summary>
            <param name="request">Page.Request对象</param>
            <param name="response">Page.Response对象</param>
            <param name="fileName">下载文件名</param>
            <param name="fullPath">带文件名下载路径</param>
            <param name="speed">每秒允许下载的字节数</param>
            <returns>返回是否成功</returns>
        </member>
        <member name="T:UtilsCore.MapperHelper`2">
            <summary>
            对象与对象映射
            </summary>
            <typeparam name="TSource">源对象</typeparam>
            <typeparam name="TTarget">结果对象</typeparam>
        </member>
        <member name="M:UtilsCore.MapperHelper`2.Map(`0)">
            <summary>
            将对象TSource转换为TTarget
            </summary>
            <param name="source">对象</param>
            <returns></returns>
        </member>
        <member name="M:UtilsCore.MapperHelper`2.MapList(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            将对象TSource集合转换为TTarget集合
            </summary>
            <param name="sources">对象集合</param>
            <returns></returns>
        </member>
        <member name="M:UtilsCore.MapperHelper`2.Map(`0,`1)">
            <summary>
            将对象TSource的值赋给给TTarget
            </summary>
            <param name="source">源对象</param>
            <param name="target">结果对象</param>
        </member>
        <member name="M:UtilsCore.MapperHelper`2.GetClassExpression(System.Linq.Expressions.Expression,System.Type,System.Type)">
            <summary>
            类型是clas时赋值
            </summary>
            <param name="sourceProperty"></param>
            <param name="sourceType"></param>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:UtilsCore.MapperHelper`2.GetListExpression(System.Linq.Expressions.Expression,System.Type,System.Type)">
            <summary>
            类型为集合时赋值
            </summary>
            <param name="sourceProperty"></param>
            <param name="sourceType"></param>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="T:UtilsCore.RandomHelper">
            <summary>
            随机数帮助类
            </summary>
        </member>
        <member name="M:UtilsCore.RandomHelper.Number(System.Int32)">
            <summary>
            生成随机数字
            </summary>
            <param name="length">生成长度</param>
        </member>
        <member name="M:UtilsCore.RandomHelper.Number(System.Int32,System.Boolean)">
            <summary>
            生成随机数字
            </summary>
            <param name="length">生成长度</param>
            <param name="sleep">是否要在生成前将当前线程阻止以避免重复</param>
        </member>
        <member name="M:UtilsCore.RandomHelper.Str(System.Int32)">
            <summary>
            生成随机字母与数字
            </summary>
            <param name="length">生成长度</param>
        </member>
        <member name="M:UtilsCore.RandomHelper.Str(System.Int32,System.Boolean)">
            <summary>
            生成随机字母与数字
            </summary>
            <param name="length">生成长度</param>
            <param name="sleep">是否要在生成前将当前线程阻止以避免重复</param>
        </member>
        <member name="M:UtilsCore.RandomHelper.StrChar(System.Int32)">
            <summary>
            生成随机纯字母随机数
            </summary>
            <param name="length">生成长度</param>
        </member>
        <member name="M:UtilsCore.RandomHelper.StrChar(System.Int32,System.Boolean)">
            <summary>
            生成随机纯字母随机数
            </summary>
            <param name="length">生成长度</param>
            <param name="sleep">是否要在生成前将当前线程阻止以避免重复</param>
        </member>
        <member name="M:UtilsCore.RandomHelper.ListData``1(System.Collections.Generic.List{``0})">
            <summary>
             随机排序list数据
            </summary>
            <typeparam name="T">对象</typeparam>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:UtilsCore.RandomHelper.NumbersNoRepeating(System.Int32,System.Int32)">
            <summary>
            生成不重复的随机数值
            </summary>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
            <returns></returns>
        </member>
        <member name="M:UtilsCore.RandomHelper.Time(System.DateTime,System.DateTime)">
            <summary>
            得到随机日期
            </summary>
            <param name="time1">起始日期</param>
            <param name="time2">结束日期</param>
            <returns>间隔日期之间的 随机日期</returns>
        </member>
        <member name="T:UtilsCore.Result.BaseResult`1">
            <summary>
            返回结果模型
            </summary>
            <typeparam name="T">自定义结果模型</typeparam>
        </member>
        <member name="P:UtilsCore.Result.BaseResult`1.Data">
            <summary>
            返回对象结果
            </summary>
        </member>
        <member name="T:UtilsCore.Result.BaseEntityResult`1">
            <summary>
            返回结果模型
            </summary>
            <typeparam name="T">自定义结果模型</typeparam>
        </member>
        <member name="P:UtilsCore.Result.BaseEntityResult`1.Data">
            <summary>
            返回对象结果
            </summary>
        </member>
        <member name="T:UtilsCore.Result.BasePagedResult`1">
            <summary>
            返回分页结果模型
            </summary>
            <typeparam name="T">自定义结果模型</typeparam>
        </member>
        <member name="T:UtilsCore.Result.BaseInfoResult">
            <summary>
            基础结果信息
            </summary>
        </member>
        <member name="P:UtilsCore.Result.BaseInfoResult.Success">
            <summary>
            是否操作成功
            </summary>
        </member>
        <member name="P:UtilsCore.Result.BaseInfoResult.ErrorCode">
            <summary>
            错误码:200是操作成功
            </summary>
        </member>
        <member name="P:UtilsCore.Result.BaseInfoResult.Message">
            <summary>
            提示信息
            </summary>
        </member>
        <member name="M:UtilsCore.Result.BaseInfoResult.SetError(UtilsCore.Result.BaseInfoResult)">
            <summary>
            设置错误消息
            </summary>
            <param name="result">基础结果信息</param>
        </member>
        <member name="M:UtilsCore.Result.BaseInfoResult.SetError(System.String,System.Nullable{System.Int32})">
            <summary>
            设置错误提示
            </summary>
            <param name="message">提示信息</param>
            <param name="code">错误码</param>
        </member>
        <member name="T:UtilsCore.Result.BasePagedInfoResult`1">
            <summary>
            分页基础结果信息
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:UtilsCore.Result.BasePagedInfoResult`1.PageIndex">
            <summary>
            页码
            </summary>
        </member>
        <member name="P:UtilsCore.Result.BasePagedInfoResult`1.PageSize">
            <summary>
            每页大小
            </summary>
        </member>
        <member name="P:UtilsCore.Result.BasePagedInfoResult`1.TotalCount">
            <summary>
            总条数
            </summary>
        </member>
        <member name="P:UtilsCore.Result.BasePagedInfoResult`1.TotalPages">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:UtilsCore.Result.BasePagedInfoResult`1.OrderBy">
            <summary>
            排序
            </summary>
        </member>
        <member name="P:UtilsCore.Result.BasePagedInfoResult`1.HasPreviousPage">
            <summary>
            是否有上一页
            </summary>
        </member>
        <member name="P:UtilsCore.Result.BasePagedInfoResult`1.HasNextPage">
            <summary>
            是否有下一页
            </summary>
        </member>
        <member name="P:UtilsCore.Result.BasePagedInfoResult`1.List">
            <summary>
            结果信息
            </summary>
        </member>
        <member name="P:UtilsCore.Result.BasePagedInfoResult`1.Params">
            <summary>
            参数信息
            </summary>
        </member>
        <member name="T:UtilsCore.Result.EnumEntity">
            <summary>
            枚举对象模型
            </summary>
        </member>
        <member name="P:UtilsCore.Result.EnumEntity.EnumName">
            <summary>  
            枚举名称  
            </summary>  
        </member>
        <member name="P:UtilsCore.Result.EnumEntity.EnumValue">
            <summary>  
            枚举对象的值  
            </summary>  
        </member>
        <member name="P:UtilsCore.Result.EnumEntity.Description">
            <summary>  
            枚举的描述  
            </summary>  
        </member>
        <member name="T:UtilsCore.Result.PagedList`1">
            <summary>
            列表分页
            </summary>
            <typeparam name="T">分页项类型</typeparam>
        </member>
        <member name="M:UtilsCore.Result.PagedList`1.#ctor(System.Linq.IQueryable{`0},System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="source">数据源</param>
            <param name="pageIndex">当前页</param>
            <param name="pageSize">每页显示条数</param>
        </member>
        <member name="M:UtilsCore.Result.PagedList`1.#ctor(System.Collections.Generic.IList{`0},System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="source">数据源</param>
            <param name="pageIndex">当前页</param>
            <param name="pageSize">每页显示条数</param>
        </member>
        <member name="M:UtilsCore.Result.PagedList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="source">数据源</param>
            <param name="pageIndex">当前页</param>
            <param name="pageSize">每页显示条数</param>
            <param name="totalCount">总记录数</param>
        </member>
        <member name="P:UtilsCore.Result.PagedList`1.PageIndex">
            <summary>
            当前页
            </summary>
        </member>
        <member name="P:UtilsCore.Result.PagedList`1.PageSize">
            <summary>
            每页显示条数
            </summary>
        </member>
        <member name="P:UtilsCore.Result.PagedList`1.TotalCount">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:UtilsCore.Result.PagedList`1.TotalPages">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:UtilsCore.Result.PagedList`1.HasPreviousPage">
            <summary>
            是否存在上一页
            </summary>
        </member>
        <member name="P:UtilsCore.Result.PagedList`1.HasNextPage">
            <summary>
            是否存在下一页
            </summary>
        </member>
        <member name="T:UtilsCore.FileHelper">
            <summary>
            文件操作类
            </summary>
        </member>
        <member name="M:UtilsCore.FileHelper.ReadFileToBytes(System.String)">
            <summary>
            读文件到byte[]
            </summary>
            <param name="fileName">硬盘文件路径</param>
            <returns></returns>
        </member>
        <member name="M:UtilsCore.FileHelper.ReadFileToStream(System.String)">
            <summary>
            读文件到Stream
            </summary>
            <param name="fileName">硬盘文件路径</param>
            <returns></returns>
        </member>
        <member name="M:UtilsCore.FileHelper.WriteBytesToFile(System.Byte[],System.String)">
            <summary>
            写byte[]到fileName
            </summary>
            <param name="bytes">byte[]</param>
            <param name="fileName">保存至硬盘路径</param>
            <returns></returns>
        </member>
        <member name="M:UtilsCore.FileHelper.StreamToBytes(System.IO.Stream)">
            <summary>
            stream转为byte[]
            </summary>
            <param name="stream">参数</param>
            <returns></returns>
        </member>
        <member name="M:UtilsCore.FileHelper.BytesToStream(System.Byte[])">
            <summary>
            byte[] 转为stream
            </summary>
            <param name="bytes">参数</param>
            <returns></returns>
        </member>
        <member name="M:UtilsCore.FileHelper.MapPath(System.String)">
            <summary>
            得到绝对路径
            </summary>
            <param name="strPath">目录路径如：dir/{DateTime.Now.Date:yyyy-MM-dd}/ </param>
            <returns></returns>
        </member>
        <member name="T:UtilsCore.ImageHelper">
            <summary>
            图片帮助类
            </summary>
        </member>
        <member name="M:UtilsCore.ImageHelper.BitmapToBytes(System.Drawing.Bitmap,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Bitmap转bytes
            </summary>
            <param name="bitmap">bitmap</param>
            <param name="imageFormat">图像格式</param>
            <returns></returns>
        </member>
        <member name="M:UtilsCore.ImageHelper.ImageToBytes(System.Drawing.Image)">
            <summary>
            图片转bytes
            </summary>
            <param name="image">图片</param>
            <returns></returns>
        </member>
        <member name="M:UtilsCore.ImageHelper.BytesToImage(System.Byte[])">
            <summary>
            bytes转Image
            </summary>
            <param name="bytes">bytes</param>
            <returns></returns>
        </member>
        <member name="M:UtilsCore.ImageHelper.CreateImageFromBytes(System.String,System.Byte[])">
            <summary>
            bytes到图片
            </summary>
            <param name="fileName">图片路径</param>
            <param name="bytes">bytes</param>
            <returns></returns>
        </member>
        <member name="M:UtilsCore.ImageHelper.OrientationImage(System.Drawing.Image)">
            <summary>
            将图片旋转到正确位置
            旋转角度  参数值
            0°	        1
            顺时针90°	6
            逆时针90°	8
            180°	    3
            </summary>
            <param name="image">图片对象</param>
            <returns></returns>
        </member>
        <member name="T:UtilsCore.ImageManager">
            <summary>
            图片处理类
            </summary>
        </member>
        <member name="T:UtilsCore.ImageManager.MakeThumbnailMode">
            <summary>
            生成缩略图的方式
            </summary>
        </member>
        <member name="F:UtilsCore.ImageManager.MakeThumbnailMode.指定高宽缩放可能变形">
            <summary>
            指定高宽缩放可能变形
            </summary>
        </member>
        <member name="F:UtilsCore.ImageManager.MakeThumbnailMode.指定宽然后高按比例">
            <summary>
            指定宽然后高按比例
            </summary>
        </member>
        <member name="F:UtilsCore.ImageManager.MakeThumbnailMode.指定高然后宽按比例">
            <summary>
            指定高然后宽按比例
            </summary>
        </member>
        <member name="F:UtilsCore.ImageManager.MakeThumbnailMode.指定高宽裁减不变形">
            <summary>
            指定高宽裁减不变形
            </summary>
        </member>
        <member name="M:UtilsCore.ImageManager.MakeThumbnail(System.String,System.String,System.Int32,System.Int32,UtilsCore.ImageManager.MakeThumbnailMode)">
            <summary>
            生成缩略图
            </summary>
            <param name="originalImagePath">源图路径（物理路径）</param>
            <param name="thumbnailPath">缩略图路径（物理路径）</param>
            <param name="width">缩略图宽度</param>
            <param name="height">缩略图高度</param>
            <param name="mode">生成缩略图的方式</param>    
        </member>
        <member name="M:UtilsCore.ImageManager.ImageWatermark(System.String,System.String,System.String)">
            <summary>
            图片水印处理方法
            </summary>
            <param name="path">需要加载水印的图片路径（绝对路径）</param>
            <param name="waterpath">水印图片（绝对路径）</param>
            <param name="location">水印位置（传送正确的代码）</param>
        </member>
        <member name="M:UtilsCore.ImageManager.GetLocation(System.String,System.Drawing.Image,System.Drawing.Image)">
            <summary>
            图片水印位置处理方法
            </summary>
            <param name="location">水印位置</param>
            <param name="img">需要添加水印的图片</param>
            <param name="waterimg">水印图片</param>
        </member>
        <member name="M:UtilsCore.ImageManager.LetterWatermark(System.String,System.Int32,System.String,System.Drawing.Color,System.String)">
            <summary>
            文字水印处理方法
            </summary>
            <param name="path">图片路径（绝对路径）</param>
            <param name="size">字体大小</param>
            <param name="letter">水印文字</param>
            <param name="color">颜色</param>
            <param name="location">水印位置</param>
        </member>
        <member name="M:UtilsCore.ImageManager.GetLocation(System.String,System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            文字水印位置的方法
            </summary>
            <param name="location">位置代码</param>
            <param name="img">图片对象</param>
            <param name="width">宽(当水印类型为文字时,传过来的就是字体的大小)</param>
            <param name="height">高(当水印类型为文字时,传过来的就是字符的长度)</param>
        </member>
        <member name="M:UtilsCore.ImageManager.LdPic(System.Drawing.Bitmap,System.Int32,System.Int32,System.Int32)">
            <summary>
            调整光暗
            </summary>
            <param name="mybm">原始图片</param>
            <param name="width">原始图片的长度</param>
            <param name="height">原始图片的高度</param>
            <param name="val">增加或减少的光暗值</param>
        </member>
        <member name="M:UtilsCore.ImageManager.RePic(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            反色处理
            </summary>
            <param name="mybm">原始图片</param>
            <param name="width">原始图片的长度</param>
            <param name="height">原始图片的高度</param>
        </member>
        <member name="M:UtilsCore.ImageManager.Fd(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            浮雕处理
            </summary>
            <param name="oldBitmap">原始图片</param>
            <param name="width">原始图片的长度</param>
            <param name="height">原始图片的高度</param>
        </member>
        <member name="M:UtilsCore.ImageManager.ResizeImage(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            拉伸图片
            </summary>
            <param name="bmp">原始图片</param>
            <param name="newW">新的宽度</param>
            <param name="newH">新的高度</param>
        </member>
        <member name="M:UtilsCore.ImageManager.FilPic(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            滤色处理
            </summary>
            <param name="mybm">原始图片</param>
            <param name="width">原始图片的长度</param>
            <param name="height">原始图片的高度</param>
        </member>
        <member name="M:UtilsCore.ImageManager.RevPicLr(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            左右翻转
            </summary>
            <param name="mybm">原始图片</param>
            <param name="width">原始图片的长度</param>
            <param name="height">原始图片的高度</param>
        </member>
        <member name="M:UtilsCore.ImageManager.RevPicUd(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            上下翻转
            </summary>
            <param name="mybm">原始图片</param>
            <param name="width">原始图片的长度</param>
            <param name="height">原始图片的高度</param>
        </member>
        <member name="M:UtilsCore.ImageManager.Compress(System.String,System.String)">
            <summary>
            压缩到指定尺寸
            </summary>
            <param name="oldfile">原文件</param>
            <param name="newfile">新文件</param>
        </member>
        <member name="M:UtilsCore.ImageManager.Gray(System.Drawing.Color)">
            <summary>
            图片灰度化
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:UtilsCore.ImageManager.BwPic(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            转换为黑白图片
            </summary>
            <param name="mybm">要进行处理的图片</param>
            <param name="width">图片的长度</param>
            <param name="height">图片的高度</param>
        </member>
        <member name="M:UtilsCore.ImageManager.GetFrames(System.String,System.String)">
            <summary>
            获取图片中的各帧
            </summary>
            <param name="pPath">图片路径</param>
            <param name="pSavedPath">保存路径</param>
        </member>
        <member name="T:UtilsCore.Interface.IPagedList`1">
             <summary>
            列表分页接口
             </summary>
        </member>
        <member name="P:UtilsCore.Interface.IPagedList`1.PageIndex">
            <summary>
            当前页
            </summary>
        </member>
        <member name="P:UtilsCore.Interface.IPagedList`1.PageSize">
            <summary>
            每页显示条数
            </summary>
        </member>
        <member name="P:UtilsCore.Interface.IPagedList`1.TotalCount">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:UtilsCore.Interface.IPagedList`1.TotalPages">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:UtilsCore.Interface.IPagedList`1.HasPreviousPage">
            <summary>
            是否存在上一页
            </summary>
        </member>
        <member name="P:UtilsCore.Interface.IPagedList`1.HasNextPage">
            <summary>
            是否存在下一页
            </summary>
        </member>
        <member name="T:UtilsCore.StringHelper">
            <summary>
            字符串帮助类
            </summary>
        </member>
        <member name="M:UtilsCore.StringHelper.CreateInstance">
            <summary>
            CreateInstance
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilsCore.StringHelper.TransferenceRegex(System.String)">
            <summary>
            转义正则表达式特殊符号
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:UtilsCore.StringHelper.GetLength(System.String)">
            <summary>
            得到字符串长度
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:UtilsCore.StringHelper.Cut(System.String,System.Int32)">
            <summary>
            按字符长度截取字符串
            </summary>
            <param name="str">字符串</param>
            <param name="charLength">字符长度</param>
            <returns></returns>
        </member>
        <member name="M:UtilsCore.StringHelper.Split(System.String,System.Char,System.Int32)">
            <summary>
            字符串分割获取项
            </summary>
            <param name="str">例如："苹果,香蕉,猕猴桃,凤梨,枇杷,葡萄,柠檬,橘子,火龙果"</param>
            <param name="splitChar">,</param>
            <param name="returnItemCount">2</param>
            <returns>苹果,香蕉</returns>
        </member>
        <member name="M:UtilsCore.StringHelper.Compress(System.String)">
            <summary>
            压缩字符串
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:UtilsCore.StringHelper.DeCompress(System.String)">
            <summary>
             字符串解压缩
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="T:UtilsCore.TimeHelper">
            <summary>
            时间相关类
            </summary>
        </member>
        <member name="M:UtilsCore.TimeHelper.TimeWithZero(System.String)">
            <summary>
            时间格式化（小时分钟前面加上0）
            </summary>
            <param name="intStr">小时、分钟</param>
            <returns>"00"</returns>
        </member>
        <member name="M:UtilsCore.TimeHelper.TimeTrimZero(System.String)">
            <summary>
            时间格式化（小时分钟去掉前面的0）
            </summary>
            <param name="intStr">小时、分钟</param>
            <returns>0</returns>
        </member>
        <member name="M:UtilsCore.TimeHelper.GetMonthLastDate(System.Int32,System.Int32)">
            <summary>
            返回某年某月最后一天
            </summary>
            <param name="year">年份</param>
            <param name="month">月份</param>
            <returns>日</returns>
        </member>
        <member name="M:UtilsCore.TimeHelper.GetDateDiff(System.DateTime,System.DateTime)">
            <summary>
            返回时间差
            </summary>
            <param name="time1">起始日期</param>
            <param name="time2">结束日期</param>
            <returns></returns>
        </member>
        <member name="M:UtilsCore.TimeHelper.GetTimeSpan(System.DateTime,System.DateTime)">
            <summary>
            获得两个日期的间隔
            </summary>
            <param name="time1">起始日期</param>
            <param name="time2">结束日期</param>
            <returns>日期间隔TimeSpan。</returns>
        </member>
        <member name="T:UtilsCore.UtilsHelper">
            <summary>
            公共工具类
            </summary>
        </member>
        <member name="M:UtilsCore.UtilsHelper.CreateInstance">
            <summary>
            初始化
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilsCore.UtilsHelper.CalcProgress(System.Int32,System.Int32,System.Int32)">
            <summary>
            计算进度条进度
            </summary>
            <param name="step">增加的量</param>
            <param name="totalCount">总条数</param>
            <param name="completeProgress">总完成进度</param>
            <returns></returns>
        </member>
        <member name="M:UtilsCore.UtilsHelper.DeepCopy``1(``0)">
            <summary>
            反射对象深度拷贝
            </summary>
            <typeparam name="T">对象模型</typeparam>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:UtilsCore.UtilsHelper.EnumToList``1">
            <summary>
            枚举转List
            </summary>
            <typeparam name="T">枚举对象</typeparam>
            <returns></returns>
        </member>
        <member name="T:UtilsCore.VerificationCodeHelper">
            <summary>
            验证图片类
            </summary>
        </member>
        <member name="P:UtilsCore.VerificationCodeHelper.Text">
            <summary>
            验证码
            </summary>
        </member>
        <member name="P:UtilsCore.VerificationCodeHelper.Image">
            <summary>
            验证码图片
            </summary>
        </member>
        <member name="M:UtilsCore.VerificationCodeHelper.#ctor(UtilsCore.VerificationCodeRule)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilsCore.VerificationCodeHelper.Next(System.Int32)">
            <summary>
            获得下一个随机数
            </summary>
            <param name="max">最大值</param>
        </member>
        <member name="M:UtilsCore.VerificationCodeHelper.Next(System.Int32,System.Int32)">
            <summary>
            获得下一个随机数
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="M:UtilsCore.VerificationCodeHelper.CreateImage(UtilsCore.VerificationCodeRule)">
            <summary>
            绘制验证码
            </summary>
        </member>
        <member name="M:UtilsCore.VerificationCodeHelper.GetRandomColor">
            <summary>
            字体随机颜色
            </summary>
        </member>
        <member name="M:UtilsCore.VerificationCodeHelper.TwistImage(System.Drawing.Bitmap,System.Boolean,System.Double,System.Double)">
            <summary>
            正弦曲线Wave扭曲图片
            </summary>
            <param name="srcBmp">图片路径</param>
            <param name="bXDir">如果扭曲则选择为True</param>
            <param name="waveformValue">波形的幅度倍数，越大扭曲的程度越高,一般为3</param>
            <param name="dPhase">波形的起始相位,取值区间[0-2*PI)</param>
        </member>
        <member name="T:UtilsCore.VerificationCodeRule">
            <summary>
            验证码生成规则
            </summary>
        </member>
        <member name="P:UtilsCore.VerificationCodeRule.LetterCount">
            <summary>
            验证码位数
            </summary>
        </member>
        <member name="P:UtilsCore.VerificationCodeRule.LetterWidth">
            <summary>
            单个字体的宽度范围
            </summary>
        </member>
        <member name="P:UtilsCore.VerificationCodeRule.LetterHeight">
            <summary>
            单个字体的高度范围
            </summary>
        </member>
        <member name="T:UtilsCore.WebHelper">
            <summary>
            网络工具类
            </summary>
        </member>
        <member name="P:UtilsCore.WebHelper.Timeout">
            <summary>
            请求与响应的超时时间
            </summary>
        </member>
        <member name="M:UtilsCore.WebHelper.DoPost``1(System.String,System.Object,System.String@)">
            <summary>
            执行HTTP POST请求
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="url">请求地址</param>
            <param name="data">参数</param>
            <param name="tips">提示</param>
            <returns></returns>
        </member>
        <member name="M:UtilsCore.WebHelper.DoPost(System.String,System.Text.Encoding)">
            <summary>
            执行HTTP POST请求
            </summary>
            <param name="url">请求地址</param>
            <param name="rspEncoding">响应编码</param>
            <returns>HTTP响应</returns>
        </member>
        <member name="M:UtilsCore.WebHelper.DoPost(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Text.Encoding)">
            <summary>
            执行HTTP POST请求
            </summary>
            <param name="url">请求地址</param>
            <param name="parameters">请求参数</param>
            <param name="rspEncoding">响应编码</param>
            <returns>HTTP响应</returns>
        </member>
        <member name="M:UtilsCore.WebHelper.DoPost(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,UtilsCore.FileItem})">
            <summary>
            执行带文件上传的HTTP POST请求。
            </summary>
            <param name="url">请求地址</param>
            <param name="textParams">请求文本参数</param>
            <param name="fileParams">请求文件参数</param>
            <returns>HTTP响应</returns>
        </member>
        <member name="M:UtilsCore.WebHelper.DoPost(System.String,System.String,System.Boolean,System.Net.CookieContainer,System.Text.Encoding)">
            <summary>
            执行HTTP POST请求
            </summary>
            <param name="url">地址</param>
            <param name="postData">post 提交的字符串</param>
            <param name="isPost">是否是post</param>
            <param name="cookieContainer">CookieContainer</param>
            <param name="rspEncoding">响应编码</param>
        </member>
        <member name="M:UtilsCore.WebHelper.DoGet(System.String,System.Text.Encoding)">
            <summary>
            执行HTTP GET请求
            </summary>
            <param name="url">请求地址</param>
            <param name="rspEncoding">响应编码</param>
            <returns></returns>
        </member>
        <member name="M:UtilsCore.WebHelper.DoGet(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Text.Encoding)">
            <summary>
            执行HTTP GET请求
            </summary>
            <param name="url">请求地址</param>
            <param name="parameters">请求参数</param>
            <param name="rspEncoding">响应编码</param>
            <returns></returns>
        </member>
        <member name="M:UtilsCore.WebHelper.DoGet(System.String,System.Net.CookieContainer,System.Text.Encoding)">
            <summary>
            执行HTTP GET请求
            </summary>
            <param name="url">地址</param>
            <param name="cookieContainer">CookieContainer</param>
            <param name="rspEncoding">响应编码</param>
        </member>
        <member name="M:UtilsCore.WebHelper.CheckValidationResult(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            CheckValidationResult
            </summary>
            <param name="sender">sender</param>
            <param name="certificate">certificate</param>
            <param name="chain">chain</param>
            <param name="errors">errors</param>
            <returns></returns>
        </member>
        <member name="M:UtilsCore.WebHelper.GetWebRequest(System.String,System.String)">
            <summary>
            GetWebRequest
            </summary>
            <param name="url">url</param>
            <param name="method">method</param>
            <returns></returns>
        </member>
        <member name="M:UtilsCore.WebHelper.GetResponseAsString(System.Net.HttpWebResponse,System.Text.Encoding)">
            <summary>
            把响应流转换为文本。
            </summary>
            <param name="rsp">响应流对象</param>
            <param name="encoding">编码方式</param>
            <returns>响应文本</returns>
        </member>
        <member name="M:UtilsCore.WebHelper.BuildGetUrl(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            组装GET请求URL。
            </summary>
            <param name="url">请求地址</param>
            <param name="parameters">请求参数</param>
            <returns>带参数的GET请求URL</returns>
        </member>
        <member name="M:UtilsCore.WebHelper.BuildQuery(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            组装普通文本请求参数。
            </summary>
            <param name="parameters">Key-Value形式请求参数字典</param>
            <returns>URL编码后的请求数据</returns>
        </member>
        <member name="T:UtilsCore.FileItem">
            <summary>
            文件元数据。
            可以使用以下几种构造方法：
            本地路径：new FileItem("C:/temp.jpg");
            本地文件：new FileItem(new FileInfo("C:/temp.jpg"));
            字节流：new FileItem("abc.jpg", bytes);
            </summary>
        </member>
        <member name="M:UtilsCore.FileItem.#ctor(System.IO.FileInfo)">
            <summary>
            基于本地文件的构造器。
            </summary>
            <param name="fileInfo">本地文件</param>
        </member>
        <member name="M:UtilsCore.FileItem.#ctor(System.String)">
            <summary>
            基于本地文件全路径的构造器。
            </summary>
            <param name="filePath">本地文件全路径</param>
        </member>
        <member name="M:UtilsCore.FileItem.#ctor(System.String,System.Byte[])">
            <summary>
            基于文件名和字节流的构造器。
            </summary>
            <param name="fileName">文件名称（服务端持久化字节流到磁盘时的文件名）</param>
            <param name="content">文件字节流</param>
        </member>
        <member name="M:UtilsCore.FileItem.#ctor(System.String,System.Byte[],System.String)">
            <summary>
            基于文件名、字节流和媒体类型的构造器。
            </summary>
            <param name="fileName">文件名（服务端持久化字节流到磁盘时的文件名）</param>
            <param name="content">文件字节流</param>
            <param name="mimeType">媒体类型</param>
        </member>
        <member name="M:UtilsCore.FileItem.GetFileName">
            <summary>
            GetFileName
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilsCore.FileItem.GetMimeType">
            <summary>
            GetMimeType
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilsCore.FileItem.GetContent">
            <summary>
            GetContent
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilsCore.FileItem.GetMimeType(System.Byte[])">
            <summary>
            获取文件的真实媒体类型。目前只支持JPG, GIF, PNG, BMP四种图片文件。
            </summary>
            <param name="fileData">文件字节流</param>
            <returns>媒体类型</returns>
        </member>
        <member name="M:UtilsCore.FileItem.GetMimeType(System.String)">
            <summary>
            根据文件后缀名获取文件的媒体类型。
            </summary>
            <param name="fileName">带后缀的文件名或文件全名</param>
            <returns>媒体类型</returns>
        </member>
        <member name="M:UtilsCore.FileItem.GetFileSuffix(System.Byte[])">
            <summary>
            获取文件的真实后缀名。目前只支持JPG, GIF, PNG, BMP四种图片文件。
            </summary>
            <param name="fileData">文件字节流</param>
            <returns>JPG, GIF, PNG or null</returns>
        </member>
    </members>
</doc>
